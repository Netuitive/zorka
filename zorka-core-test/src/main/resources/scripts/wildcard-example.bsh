// This is sample script intended to help understanding how to implement arbitrary method instrumentation.

// To run:
//  1. update zorka.properties to add it to list of loaded scripts, i.e. scripts = jvm.bsh, wildcard-example.bsh
//  2. update zorka.properties to set zorka.application = Calculator
//  3. get the api key by creating a java datasource on Netuitive Cloud: [https://app.netuitive.com].
//  4. update zorka.properties to set netuitive.api.key using the key obtained from previous step.
//  5. assuming 'java' command is available from system path, type 'java -javaagent:./netuitive.jar=. -jar zorka-core-test.jar
//  6. upon prompt, start typing 1+2[enter] 3-3[enter] 2*3[enter] 3/3[enter] 3/0[enter] ...
//  7. observe a jvm element named 'Calculator' shows up in Netuitive with general jvm system metrics and the CalculatorStats method call metrics

// Call zorka.require(...) to load additional scripts that this one depends on.
zorka.require("jvm.bsh");

//creating new custom spy definition
__mbsRegister() {
  process(record) {
    synchronized (super) {
        //number of packages to include in the metric name. use -1 to include all
        packageLimit = -1;
        length = Thread.currentThread().getStackTrace().length;
        methodName = Thread.currentThread().getStackTrace()[length - 2].getMethodName();
        packagePath = Thread.currentThread().getStackTrace()[length - 2].getClassName();
        packageName = null;
        //calculate packages to include
        for (int i = packagePath.length() - 1; i >= 0 && packageLimit > 0; i--) {
            if (packagePath.charAt(i) == '.') {
                packageLimit--;
                if (packageLimit == 0) {
                    packageName = packagePath.substring(i+1);
                }
            }
        }
        //adding them to the spy map
        record.put("METHOD_NAME", methodName);
        record.put("CLASS_NAME", packageName == null ? packagePath : packageName);
    }
    return record;
  }
  return this;
} // __mbsRegister()

// BeanShall has no notion of namespaces, so we simulate namespace using function
// that returns reference to its own instance and then defining variable that
// holds instance of this function.
__calculator() {

  // This defines the jmx mbean that will host the method call statistics
  _mbean = "zorka:type=ZorkaStats,name=CalculatorStats";

  // This adds the spy definition to instrument method 'calculator' of "com.netuitive.agent.test.Calculator" class
  // The method('caculate') call statistics (calls, errors, time) are grouped/keyed by the method's first argument('operator')
  spy.add(spy.instrument("CALCULATOR")
    .onEnter(
      spy.fetchArg("operator", 1),
      spy.zorkaLog("INFO", "CALCULATOR", "${operator}"))
    .onReturn(
      spy.fetchArg("THIS", 0), //capturing the base instance. this needs to be done in onReturn because it blows up if called beforehand on constructors
      (com.jitlogic.zorka.core.spy.SpyProcessor)__mbsRegister()) // adding the custom spy definition
    .onSubmit(
      spy.zorkaStats("java", _mbean, "stats", "${CLASS_NAME}.${METHOD_NAME}")) //we can access the vars we added to the spy map here
    .include(spy.byMethod("com.netuitive.agent.**", "*")) //wildcarding. it uses the ant format.
  );

  return this;
}

calculator = __calculator();

